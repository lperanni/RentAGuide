let bcrypt,passport,models,initializePassport;_bb9‍.x([["default",()=>AuthController]]);_bb9‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_bb9‍.w("passport",[["default",["passport"],function(v){passport=v}]]);_bb9‍.w("../models",[["default",["models"],function(v){models=v}]]);_bb9‍.w("../services/passport-config",[["initializePassport",["initializePassport"],function(v){initializePassport=v}]]);





initializePassport(
  passport,
  email => models.User.findAll({
    limit: 1,
    where: {
      email: email
    }
  }),
  id => models.User.findAll({
    limit: 1,
    where: {
      id: id
    }
  })
);

               class AuthController{
  
  static async registerUser(req, res){
      
      const hash = await bcrypt.hash(req.body.password, 10)
      models.User.create({
        first_name: firstName, 
        last_name: lastName, 
        email: email, 
        password: hash
      }).then(() => res.sendStatus(204))
        .catch(err => res.status(404).send(err))
  }

}